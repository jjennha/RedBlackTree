#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cstring>
#include <deque>
#include <functional>
#include <queue>
#include <pthread.h>
#include <zconf.h>

# define COUNT 5 // for testing

using namespace std;

enum Color {
    RED, BlACK
};
queue<string> readers;
queue<string> writers;
int readLimit;
int writeLimit;

struct Node {
    int key;
    Node *parent;
    bool color;
    Node *left;
    Node *right;

    Node(int k, bool color) {
        this->key = k;
        this->color = color;
        left = right = parent = NULL;
    }

    Node(bool color) {
        this->key = NULL;
        this->color = color;
        left = right = parent = NULL;
    }
    // returns pointer to uncle
    Node *uncle() {
        // If no parent or grandparent, then no uncle
        if (parent == NULL or parent->parent == NULL)
            return NULL;

        if (parent->isOnLeft())
            // uncle on right
            return parent->parent->right;
        else
            // uncle on left
            return parent->parent->left;
    }

    // check if node is left child of parent
    bool isOnLeft() { return this == parent->left; }

    // returns pointer to sibling
    Node *sibling() {
        // sibling null if no parent
        if (parent == NULL)
            return NULL;

        if (isOnLeft())
            return parent->right;

        return parent->left;
    }
    // moves node down and moves given node in its place
    void moveDown(Node *nParent) {
        if (parent != NULL) {
            if (isOnLeft()) {
                parent->left = nParent;
            } else {
                parent->right = nParent;
            }
        }
        nParent->parent = parent;
        parent = nParent;
    }

    bool hasRedChild() {
        return (left != NULL and left->color == RED) or
               (right != NULL and right->color == RED);
    }

};

class RedBlackTree {
private:
//    void rotateLeft(Node *node);
//
//    void rotateRight(Node *node);

    void rbTreeify(Node *node);

    void remove_1(Node *node);

    void remove_2(Node *node);

    void remove_3(Node *node);

    void remove_4(Node *node);

    void remove_5(Node *node);

    void remove_6(Node *node);

    void replace(Node *o, Node *n);

    void findReplace(Node *n);
    // left rotates the given node
    void rotateLeft(Node *x) {
        // new parent will be node's right child
        Node *nParent = x->right;

        // update root if current node is root
        if (x == root)
            root = nParent;

        x->moveDown(nParent);

        // connect x with new parent's left element
        x->right = nParent->left;
        // connect new parent's left element with node
        // if it is not null
        if (nParent->left != NULL)
            nParent->left->parent = x;

        // connect new parent with x
        nParent->left = x;
    }
    void rotateRight(Node *x) {
        // new parent will be node's left child
        Node *nParent = x->left;

        // update root if current node is root
        if (x == root)
            root = nParent;

        x->moveDown(nParent);

        // connect x with new parent's right element
        x->left = nParent->right;
        // connect new parent's right element with node
        // if it is not null
        if (nParent->right != NULL)
            nParent->right->parent = x;

        // connect new parent with x
        nParent->right = x;
    }

    void swapColors(Node *x1, Node *x2) {
        int temp;
        temp = x1->color;
        x1->color = x2->color;
        x2->color = temp;
    }
    void swapValues(Node *u, Node *v) {
        int temp;
        temp = u->key;
        u->key = v->key;
        v->key = temp;
    }

    // fix red red at given node
    void fixRedRed(Node *x) {
        // if x is root color it black and return
        if (x == root) {
            x->color = BlACK;
            return;
        }

        // initialize parent, grandparent, uncle
        Node *parent = x->parent, *grandparent = parent->parent,
                *uncle = x->uncle();

        if (parent->color != BlACK) {
            if (uncle != NULL && uncle->color == RED) {
                // uncle red, perform recoloring and recurse
                parent->color = BlACK;
                uncle->color = BlACK;
                grandparent->color = RED;
                fixRedRed(grandparent);
            } else {
                // Else perform LR, LL, RL, RR
                if (parent->isOnLeft()) {
                    if (x->isOnLeft()) {
                        // for left right
                        swapColors(parent, grandparent);
                    } else {
                        rotateRight(parent);
                        swapColors(x, grandparent);
                    }
                    // for left left and left right
                    rotateRight(grandparent);
                } else {
                    if (x->isOnLeft()) {
                        // for right left
                        rotateRight(parent);
                        swapColors(x, grandparent);
                    } else {
                        swapColors(parent, grandparent);
                    }

                    // for right right and right left
                    rotateLeft(grandparent);
                }
            }
        }
    }

    // find node that do not have a left child
    // in the subtree of the given node
    Node *successor(Node *x) {
        Node *temp = x;

        while (temp->left != NULL)
            temp = temp->left;

        return temp;
    }
    // find node that replaces a deleted node in BST
    Node *BSTreplace(Node *x) {
        // when node have 2 children
        if (x->left != NULL and x->right != NULL)
            return successor(x->right);

        // when leaf
        if (x->left == NULL and x->right == NULL)
            return NULL;

        // when single child
        if (x->left != NULL)
            return x->left;
        else
            return x->right;
    }

    // deletes the given node
    void deleteNode(Node *v) {
        Node *u = BSTreplace(v);

        // True when u and v are both black
        bool uvBlack = ((u == NULL or u->color == BlACK) and (v->color == BlACK));
        Node *parent = v->parent;

        if (u == NULL) {
            // u is NULL therefore v is leaf
            if (v == root) {
                // v is root, making root null
                root = NULL;
            } else {
                if (uvBlack) {
                    // u and v both black
                    // v is leaf, fix double black at v
                    fixDoubleBlack(v);
                } else {
                    // u or v is red
                    if (v->sibling() != NULL)
                        // sibling is not null, make it red"
                        v->sibling()->color = RED;
                }

                // delete v from the tree
                if (v->isOnLeft()) {
                    parent->left = NULL;
                } else {
                    parent->right = NULL;
                }
            }
            delete v;
            return;
        }

        if (v->left == NULL or v->right == NULL) {
            // v has 1 child
            if (v == root) {
                // v is root, assign the value of u to v, and delete u
                v->key = u->key;
                v->left = v->right = NULL;
                delete u;
            } else {
                // Detach v from tree and move u up
                if (v->isOnLeft()) {
                    parent->left = u;
                } else {
                    parent->right = u;
                }
                delete v;
                u->parent = parent;
                if (uvBlack) {
                    // u and v both black, fix double black at u
                    fixDoubleBlack(u);
                } else {
                    // u or v red, color u black
                    u->color = BlACK;
                }
            }
            return;
        }

        // v has 2 children, swap values with successor and recurse
        swapValues(u, v);
        deleteNode(u);
    }

    void fixDoubleBlack(Node *x) {
        if (x == root)
            // Reached root
            return;

        Node *sibling = x->sibling(), *parent = x->parent;
        if (sibling == NULL) {
            // No sibiling, double black pushed up
            fixDoubleBlack(parent);
        } else {
            if (sibling->color == RED) {
                // Sibling red
                parent->color = RED;
                sibling->color = BlACK;
                if (sibling->isOnLeft()) {
                    // left case
                    rotateRight(parent);
                } else {
                    // right case
                    rotateLeft(parent);
                }
                fixDoubleBlack(x);
            } else {
                // Sibling black
                if (sibling->hasRedChild()) {
                    // at least 1 red children
                    if (sibling->left != NULL and sibling->left->color == RED) {
                        if (sibling->isOnLeft()) {
                            // left left
                            sibling->left->color = sibling->color;
                            sibling->color = parent->color;
                            rotateRight(parent);
                        } else {
                            // right left
                            sibling->left->color = parent->color;
                            rotateRight(sibling);
                            rotateLeft(parent);
                        }
                    } else {
                        if (sibling->isOnLeft()) {
                            // left right
                            sibling->right->color = parent->color;
                            rotateLeft(sibling);
                            rotateRight(parent);
                        } else {
                            // right right
                            sibling->right->color = sibling->color;
                            sibling->color = parent->color;
                            rotateLeft(parent);
                        }
                    }
                    parent->color = BlACK;
                } else {
                    // 2 black children
                    sibling->color = RED;
                    if (parent->color == BlACK)
                        fixDoubleBlack(parent);
                    else
                        parent->color = BlACK;
                }
            }
        }
    }
public:
    Node *root;

    RedBlackTree() {
        root = NULL;
    }

    void initialize(vector<string> *nodeData);

    void insert(int v);

    void remove(int v);

    Node *search(int v, int thread);

    Node *sibling(Node *n) {
        cout << "yosib"<<endl;
        if (n == NULL || n->parent == NULL) {
            return n;
        }
        if (n->parent->right != NULL && n->parent->right == n) {
            return n->parent->left;
        } else if (n->parent->left != NULL) {
            return n->parent->right;
        }
        return n;
    }

    Node *uncle(Node *n) {
        if (n == NULL || n->parent == NULL || n->parent->parent == NULL) {
            return n;
        }
        return sibling(n->parent);
    }

    Node *grandparent(Node *n) {
        if (n == NULL || n->parent == NULL || n->parent->parent != NULL) {
            return n;
        }
        return n->parent->parent;
    }

    Node *predecessor(Node *n) {
        if (n == NULL) { return n; }
        while (n->right != NULL) {
            n = n->right;
        }
        return n;
    }
    void deleteByVal(int n) {
        if (root == NULL)
            // Tree is empty
            return;

        Node *v = search(n,-1);
        Node *u;

        if (v->key!= n) {
            cout << "No node found to delete with value:" << n << endl;
            return;
        }

        deleteNode(v);
    }
};

RedBlackTree *rbtree = new RedBlackTree();

struct thread_data {
    int thread_id;
};

int height(Node *node) {
    if (node == NULL)
        return 0;
    else {
        int lheight = height(node->left);
        int rheight = height(node->right);

        if (lheight > rheight)
            return (lheight + 1);
        else return (rheight + 1);
    }
}

void printGivenLevel(Node *root, int level) {
    if (root == NULL) {
        return;
    }
    if (level == 1) {
        printf("(%i%c)", root->key, ((root->color) ? 'b' : 'r'));
    } else if (level > 1) {
        printGivenLevel(root->left, level - 1);
        printGivenLevel(root->right, level - 1);
    }
}

void printLevelOrder(Node *root) {
    int h = height(root);
    int i;
    for (i = 1; i <= h; i++) {
        printGivenLevel(root, i);
//        cout << endl;
    }
    printf("\n");
}

void print2DUtil(Node *root, int space) {
    if (root == NULL)
        return;
    space += COUNT;
    print2DUtil(root->right, space);
    printf("\n");
    for (int i = COUNT; i < space; i++)
        printf(" ");
    printf("(%i%c)", root->key, ((root->color) ? 'b' : 'r'));
    print2DUtil(root->left, space);
}

void print2D(Node *root) {
    print2DUtil(root, 0);
    printf("\n");
}

Node *strToNode(string data) {
    Node *n;
    char color = data.back();
    if (color == 'b') {
        color = BlACK;
    } else if (color == 'r') {
        color = RED;
    }
    if (color == 'f') {
        color = BlACK;
        n = new Node(color);
    } else {
        int val = stoi(data.substr(0, data.size() - 1));
        n = new Node(val, color);
    }
    return n;
}

/**
 * Helper method to contruct tree recursively
 * @param nodes
 * @param start
 * @param end
 * @return
 */
Node *construct(vector<string> nodes, int start, int end) {
    if (start > end || nodes[start] == "f") { return NULL; }
    Node *node = strToNode(nodes[start]);

    int i;
    for (i = start; i <= end; i++) {
        if (strToNode(nodes[i])->key > node->key) {
            break;
        }
    }
    node->left = construct(nodes, start + 1, i - 1);
    node->right = construct(nodes, i, end);
    if (node->left) {
        node->left->parent = node;
    }
    if (node->right) {
        node->right->parent = node;
    }
    return node;
}

/**
 * Initializes tree with predefined nodes if any
 * @param nodes
 */
void RedBlackTree::initialize(vector<string> *nodes) {
    root = construct(*nodes, 0, nodes->size() - 1);
}
//
///**
// * Rotates subtree left to maintain Red-Black tree properties
// * @param node
// */
//void RedBlackTree::rotateLeft(Node *node) {
//    Node *right = node->right;
//    node->right = (right)? right->left : NULL;
//    if (node->right != NULL) {
//        node->right->parent = node;
//    }
//    right->parent = node->parent;
//    if (node->parent == NULL) {
//        root = right;
//    } else if (node == node->parent->left) {
//        node->parent->left = right;
//    } else {
//        node->parent->right = right;
//    }
//    right->left = node;
//    node->parent = right;
//}
//
///**
// * Rotates subtree right to maintain Red-Black tree properties
// * @param node
// */
//void RedBlackTree::rotateRight(Node *node) {
//    Node *left = node->left;
//    node->left = node->right;
//    if (node->left != NULL) {
//        node->left->parent = node;
//    }
//    left->parent = node->parent;
//    if (node->parent == NULL) {
//        root = left;
//    } else if (node == node->parent->left) {
//        node->parent->left = left;
//    } else {
//        node->parent->right = left;
//    }
//    left->right = node;
//    node->parent = left;
//}

/**
 * Restructure via recoloring and/or rotating tree to fit Red-Black tree properties.
 * @param node
 */
void RedBlackTree::rbTreeify(Node *node) {
    Node *parentOfNode = NULL;
    Node *gParentOfNode = NULL;

    // while both node to insert and nodes parent are RED
    while ((node != root) && (node->color != BlACK) && (node->parent->color == RED)) {
        parentOfNode = node->parent;
        gParentOfNode = node->parent->parent;

        // (1) if parent of node is left child of grandparent of node
        if (parentOfNode == gParentOfNode->left) {
            Node *uncleOfNode = gParentOfNode->right;

            // (1.1) if uncle of node is red -> recolor
            if (uncleOfNode != NULL && uncleOfNode->color == RED) {
                gParentOfNode->color = RED;
                parentOfNode->color = BlACK;
                uncleOfNode->color = BlACK;
                node = gParentOfNode;
            } else {
                // (1.2) if node is right child of its parent -> rotate left
                if (node == parentOfNode->right) {
                    rotateLeft(parentOfNode);
                    node = parentOfNode;
                    parentOfNode = node->parent;
                }

                // (1.3) node is left child of its parent -> rotate right
                rotateRight(gParentOfNode);
                swap(parentOfNode->color, gParentOfNode->color);
                node = parentOfNode;
            }
        }
            // (2) if parent parent of node is right child of grandparent of node
        else {
            Node *uncleOfNode = gParentOfNode;

            // (2.1) if uncle of node is red -> recolor
            if ((uncleOfNode != NULL) && (uncleOfNode->color == RED)) {
                gParentOfNode->color = RED;
                parentOfNode->color = BlACK;
                uncleOfNode->color = BlACK;
                node = gParentOfNode;
            } else {
                // (2.2) if node is left child of parent -> rotate right
                if (node == parentOfNode->left) {
                    rotateRight(parentOfNode);
                    node = parentOfNode;
                    parentOfNode = node->parent;
                }
                // (2.3) node is right child of its parent -> rotate left
                rotateLeft(gParentOfNode);
                swap(parentOfNode->color, gParentOfNode->color);
                node = parentOfNode;

            }
        }
    }
    root->color = BlACK;
}

/**
 * Recursive helper method to insert node into BST
 * @param root
 * @param node
 * @return root node
 */
Node *insertBST(Node *root, Node *node) {
    if (root == NULL) { return node; }
    if (node->key < root->key) {
        root->left = insertBST(root->left, node);
        root->left->parent = root;
    } else if (node->key > root->key) {
        root->right = insertBST(root->right, node);
        root->right->parent = root;
    }
    return root;
}

/**
 * Insert node into BST
 * @param v
 * @return
 */
void RedBlackTree::insert(int v) {
    Node *node = new Node(v, RED);
    root = insertBST(root, node);
    rbTreeify(node);
//    printLevelOrder(root);
}

/**
 * Splits string into array based on delimiter
 * @param str
 * @param sep
 * @return
 */
vector<string> split(string str, string del) {
    char *cstr = const_cast<char *>(str.c_str());
    char *current;
    std::vector<std::string> arr;
    current = strtok(cstr, del.c_str());
    while (current != NULL) {
        arr.push_back(current);
        current = strtok(NULL, del.c_str());
    }
    return arr;
}

/**
 * Trims white space from string
 * @param str
 * @return
 */
string trim(string str) {
    size_t first = str.find_first_not_of(' ');
    if (string::npos == first) {
        return str;
    }
    size_t last = str.find_last_not_of(' ');
    return str.substr(first, (last - first + 1));
}

Node *recSearch(Node *root, int key, int thread) {
    if (root == NULL) {
        if (thread != -1) {
            printf("search(%i)-> false, performed by thread %i \n", key, thread);
        }
        return root;
    }
    if (root->key == key) {
        if (thread != -1) {
            printf("search(%i)-> true, performed by thread %i \n", root->key, thread);
        }
        return root;
    }
    if (root->key < key) {
        return recSearch(root->right, key, thread);
    }
    return recSearch(root->left, key, thread);
}

Node *RedBlackTree::search(int v, int thread) {
    return recSearch(root, v, thread);
}

void RedBlackTree::replace(Node *oldn, Node *newn) {
    if (oldn->parent == NULL) {
        root = newn;
    } else {
        if (oldn == oldn->parent->left)
            oldn->parent->left = newn;
        else
            oldn->parent->right = newn;
    }
    if (newn != NULL) {
        newn->parent = oldn->parent;
    }
}

void RedBlackTree::remove(int v) {
    Node *vNode = search(v, -1);
    if (vNode == NULL) { return; }
    if (vNode->left != NULL && vNode->right != NULL) {
        Node *pred = predecessor(vNode->left);
        vNode->key = pred->key;
        vNode = pred;
    }
    Node *child;
    if (vNode->left != NULL || vNode->right != NULL) { return; }
    child = (vNode->right == NULL) ? vNode->left : vNode->right;
    if (vNode->color == BlACK) {
        vNode->color = (child==NULL)? BlACK : child->color;
        cout << "vNode->color: " <<vNode->color << endl;
        remove_1(vNode);
    }
    replace(vNode, child);
    rbTreeify(root);
}

void RedBlackTree::remove_1(Node *n) {
    if (n->parent == NULL) {
        return;
    }
    cout << "1" << endl;
    remove_2(n);
}

void RedBlackTree::remove_2(Node *n) {
    if (sibling(n)->color == RED) {
        n->parent->color = RED;
        sibling(n)->color = BlACK;
        if (n == n->parent->left) {
            rotateLeft(n->parent);
        } else {
            rotateRight(n->parent);
        }
    }
    cout << "2" << endl;
    remove_3(n);
}

void RedBlackTree::remove_3(Node *n) {
    if (n->parent->color == BlACK && sibling(n)->color == BlACK
        && sibling(n)->left->color == BlACK && sibling(n)->right->color == BlACK) {
        sibling(n)->color = RED;
        remove_1(n->parent);
    } else
        remove_4(n);
}

void RedBlackTree::remove_4(Node *n) {
    if (n->parent->color == RED && sibling(n)->color == BlACK &&
        sibling(n)->left->color == BlACK && sibling(n)->right->color == BlACK) {
        sibling(n)->color = RED;
        n->parent->color = BlACK;
    } else {
        remove_5(n);
    }
}

void RedBlackTree::remove_5(Node *n) {
    int sibLeftColor = (sibling(n)->right)? sibling(n)->right->color: BlACK;
    int sibRightColor = (sibling(n)->left)? sibling(n)->left->color: BlACK;

    /*
     * n == n->parent->left && sibling(n)->color == BlACK &&
        sibling(n)->left->color == RED && sibling(n)->right->color == BlACK
     * */
    if (n == n->parent->left && sibling(n)->color == BlACK &&
        sibLeftColor == RED && sibRightColor == BlACK) {
        sibling(n)->color = RED;

        if(sibling(n)->left){
            sibling(n)->left->color = BlACK;
        }
        cout << "yo"<<endl;
        rotateRight(sibling(n));
    } else if (n == n->parent->right && sibling(n)->color == BlACK &&
               sibRightColor == RED && sibLeftColor == BlACK) {
        sibling(n)->color = RED;
        if(sibling(n)->right){
            sibling(n)->right->color = BlACK;
        }
        cout << "yo2"<<endl;
        rotateLeft(sibling(n));
    }
    cout << "going 6" << endl;
    remove_6(n);
}

void RedBlackTree::remove_6(Node *n) {
    sibling(n)->color = n->parent->color;
    n->parent->color = BlACK;
    if (n == n->parent->left) {
        if (sibling(n)->right->color != RED) { return; }
        sibling(n)->right->color = BlACK;
        rotateLeft(n->parent);
    } else {
        if (sibling(n)->left->color != RED) { return; }
        sibling(n)->left->color = BlACK;
        rotateRight(n->parent);
    }
}

class monitor {
private:
    int rcnt; // # readers reading
    int wcnt; // # writers writing
    int waitr; // # reader waiting
    int waitw; // # writers waiting
    pthread_cond_t canread;
    pthread_cond_t canwrite;
    pthread_mutex_t condlock;
public:
    monitor() {
        rcnt = 0;
        wcnt = 0;
        waitr = 0;
        waitw = 0;

        pthread_cond_init(&canread, NULL);
        pthread_cond_init(&canwrite, NULL);
        pthread_mutex_init(&condlock, NULL);
    }

    // mutex provide synchronisation so that no other thread
    // can change the value of data
    void beginread(int i, int key) {
        pthread_mutex_lock(&condlock);

        // wait to read if writers are writing or waiting or if the limit for # of readers has been hit
        if (wcnt == 1 || waitw > 0 || rcnt >= readLimit) {
            waitr++;
            pthread_cond_wait(&canread, &condlock);
            waitr--;
        }

        rcnt++;
        rbtree->search(key, i);
        pthread_mutex_unlock(&condlock);
        pthread_cond_broadcast(&canread);
    }

    void endread(int i) {
        pthread_mutex_lock(&condlock);
        if (--rcnt == 0) {
            pthread_cond_signal(&canwrite);
        }
        pthread_mutex_unlock(&condlock);
    }

    void beginwrite(int i, string op, int key) {
        pthread_mutex_lock(&condlock);

        // wait to write if there is a writer writing / if there are readers waiting / if the number of mod threads has been hit
        if (wcnt == 1 || rcnt > 0 || waitr > 0 || wcnt >= writeLimit) {
            ++waitw;
            pthread_cond_wait(&canwrite, &condlock);
            --waitw;
        }
        wcnt = 1;
//        printf(" - BEFORE modification: %s -\n", op.c_str());
//        printLevelOrder(rbtree->root);
        if (op.front() == 'i') {
            rbtree->insert(key);
        } else {
            rbtree->deleteByVal(key);
        }
        printf(" - AFTER: %s -\n", op.c_str());
        printLevelOrder(rbtree->root);
        pthread_mutex_unlock(&condlock);
    }

    void endwrite(int i) {
        pthread_mutex_lock(&condlock);
        wcnt = 0;
        // if any readers are waiting, threads are unblocked
        if (waitr > 0) {
            pthread_cond_signal(&canread);
        } else {
            pthread_cond_signal(&canwrite);
        }
        pthread_mutex_unlock(&condlock);
    }

}

// global object of monitor class
        M;

void *reader(void *td) {
    struct thread_data *data;
    data = (struct thread_data *) td;
    int i = (int) data->thread_id;
    while (!readers.empty()) {
        string op = readers.front();
        readers.pop();
        int key = stoi(op.substr(op.find('(') + 1, op.find(')') - 1));
        usleep(1);
        M.beginread(i, key);
        M.endread(i);
    }
}

void *writer(void *td) {
    struct thread_data *data;
    data = (struct thread_data *) td;
    int c = 0;
    int i = (int) data->thread_id;
    while (!writers.empty()) {
        string op = writers.front();
        writers.pop();
        if (!op.empty()) {
            int key = stoi(op.substr(op.find('(') + 1, op.find(')') - 1));
            usleep(1);
            M.beginwrite(i, op, key);
            M.endwrite(i);
            c++;
        }
    }
}

void setLimits(int r, int w) {
    readLimit = r;
    writeLimit = w;
}

int main(int argc, char **argv) {
    cout << "\n---- BEGIN ----\n" << endl;
    vector<string> nodeInputs;
    int searchThreads;
    int modThreads;
    vector<string> ops;

    if (argv[1]) {
        string contents;
        ifstream infile;
        infile.open(argv[1]);
        int line = 0;
        while (!infile.eof()) {
            getline(infile, contents);
            stringstream ss(contents);
            string token;
            getline(ss, token);
            // get existing Node data
            if (line == 0) {
                nodeInputs = split(token, ",");
                if (nodeInputs.size() == 0) {
                    cout << "empty" << endl;
                }
            }
            // get number of search threads
            if (line == 2) {
                searchThreads = stoi(token.substr(token.find(':') + 2));
            }
            // get number of modification threads
            if (line == 3) {
                modThreads = stoi(token.substr(token.find(':') + 2));
            }
            // get operations data
            if (line > 4) {
                vector<string> lineOps = split(token, "||");
                for (string op: lineOps) {
                    ops.push_back(trim(op));
                }
            }

            line++;
        }
        infile.close();
        setLimits(searchThreads, modThreads);
        rbtree->initialize(&nodeInputs);

        for (string op: ops) {
            char command = op.front();
            if (command == 'i') {
                writers.push(op);
            }
            if (command == 's') {
                readers.push(op);
            }
            if (command == 'd') {
                writers.push(op);
            }
        }
        int rqSize = readers.size();
        int wqSize = writers.size();
        pthread_t r[searchThreads], w[modThreads];
        struct thread_data tdr[searchThreads];
        struct thread_data tdw[modThreads];

        for (int i = 0; i < searchThreads && !readers.empty(); i++) {
            tdr[i].thread_id = i;
            pthread_create(&r[i], NULL, &reader, &tdr[i]);
        }
//        while (!writers.empty()) {
//            string op = writers.front();
//            cout << op << endl;
//            writers.pop();
//            if (!op.empty()) {
//                int key = stoi(op.substr(op.find('(') + 1, op.find(')') - 1));
//                if (op.front() == 'i') {
//                    rbtree->insert(key);
//                } else {
//                    rbtree->deleteByVal(key);
//                }
//            }
//        }

        for (int i = 0; i < modThreads && !writers.empty(); i++) {
            tdw[i].thread_id = i;
            pthread_create(&w[i], NULL, &writer, &tdw[i]);
        }
        for (int i = 0; i < searchThreads && i < rqSize; i++) {
            pthread_join(r[i], NULL);
        }
        for (int i = 0; i < modThreads && i < wqSize; i++) {
            pthread_join(w[i], NULL);
        }
    }
//    printLevelOrder(rbtree->root);
    print2D(rbtree->root);
    return 0;
}

